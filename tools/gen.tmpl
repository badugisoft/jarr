// ********************************************************* //
// The content of this file is auto-generated, DO NOT MODIFY //
// ********************************************************* //

package jarr

{{range $t := .}}
type {{upper $t}} []{{$t}}

func (s {{upper $t}}) Equal(v {{upper $t}}) bool {
	if s == nil {
		if v == nil {
			return true
		}
		return false
	} else if v == nil {
		return false
	} else if len(s) != len(v) {
		return false
	} else {
		for i, e := range s {
			if e != v[i] {
				return false
			}
		}
		return true
	}
}

type {{upper $t}}MapFunc func(cur {{$t}}) {{$t}}

func (s {{upper $t}}) Map(f {{upper $t}}MapFunc) {{upper $t}} {
	r := make([]{{$t}}, len(s))
	for i, e := range s {
		r[i] = f(e)
	}
	return r
}

type {{upper $t}}MapIndexFunc func(cur {{$t}}, idx int) {{$t}}

func (s {{upper $t}}) MapIndex(f {{upper $t}}MapIndexFunc) {{upper $t}} {
	r := make([]{{$t}}, len(s))
	for i, e := range s {
		r[i] = f(e, i)
	}
	return r
}
{{if ne $t "string"}}
type {{upper $t}}MapStringFunc func(cur {{$t}}) string

func (s {{upper $t}}) MapString(f {{upper $t}}MapStringFunc) String {
	r := make([]string, len(s))
	for i, e := range s {
		r[i] = f(e)
	}
	return r
}

type {{upper $t}}MapStringIndexFunc func(cur {{$t}}, idx int) string

func (s {{upper $t}}) MapStringIndex(f {{upper $t}}MapStringIndexFunc) String {
	r := make([]string, len(s))
	for i, e := range s {
		r[i] = f(e, i)
	}
	return r
}
{{end}}
{{if ne $t "int"}}
type {{upper $t}}MapIntFunc func(cur {{$t}}) int

func (s {{upper $t}}) MapInt(f {{upper $t}}MapIntFunc) Int {
	r := make([]int, len(s))
	for i, e := range s {
		r[i] = f(e)
	}
	return r
}

type {{upper $t}}MapIntIndexFunc func(cur {{$t}}, idx int) int

func (s {{upper $t}}) MapIntIndex(f {{upper $t}}MapIntIndexFunc) Int {
	r := make([]int, len(s))
	for i, e := range s {
		r[i] = f(e, i)
	}
	return r
}
{{end}}
type {{upper $t}}ReduceFunc func(pre {{$t}}, cur {{$t}}) {{$t}}

func (s {{upper $t}}) Reduce(f {{upper $t}}ReduceFunc, init {{$t}}) {{$t}} {
	r := init
	for _, e := range s {
		r = f(r, e)
	}
	return r
}

type {{upper $t}}ReduceIndexFunc func(pre {{$t}}, cur {{$t}}, idx int) {{$t}}

func (s {{upper $t}}) ReduceIndex(f {{upper $t}}ReduceIndexFunc, init {{$t}}) {{$t}} {
	r := init
	for i, e := range s {
		r = f(r, e, i)
	}
	return r
}
{{if ne $t "string"}}
type {{upper $t}}ReduceStringFunc func(pre string, cur {{$t}}) string

func (s {{upper $t}}) ReduceString(f {{upper $t}}ReduceStringFunc, init string) string {
	r := init
	for _, e := range s {
		r = f(r, e)
	}
	return r
}

type {{upper $t}}ReduceStringIndexFunc func(pre string, cur {{$t}}, idx int) string

func (s {{upper $t}}) ReduceStringIndex(f {{upper $t}}ReduceStringIndexFunc, init string) string {
	r := init
	for i, e := range s {
		r = f(r, e, i)
	}
	return r
}
{{end}}
{{if ne $t "int"}}
type {{upper $t}}ReduceIntFunc func(pre int, cur {{$t}}) int

func (s {{upper $t}}) ReduceInt(f {{upper $t}}ReduceIntFunc, init int) int {
	r := init
	for _, e := range s {
		r = f(r, e)
	}
	return r
}

type {{upper $t}}ReduceIntIndexFunc func(pre int, cur {{$t}}, idx int) int

func (s {{upper $t}}) ReduceIntIndex(f {{upper $t}}ReduceIntIndexFunc, init int) int {
	r := init
	for i, e := range s {
		r = f(r, e, i)
	}
	return r
}
{{end}}
type {{upper $t}}TestFunc func(cur {{$t}}) bool
type {{upper $t}}TestIndexFunc func(cur {{$t}}, idx int) bool

func (s {{upper $t}}) Some(f {{upper $t}}TestFunc) bool {
	for _, e := range s {
		if f(e) {
			return true
		}
	}
	return false
}

func (s {{upper $t}}) SomeIndex(f {{upper $t}}TestIndexFunc) bool {
	for i, e := range s {
		if f(e, i) {
			return true
		}
	}
	return false
}

func (s {{upper $t}}) Every(f {{upper $t}}TestFunc) bool {
	for _, e := range s {
		if !f(e) {
			return false
		}
	}
	return true
}

func (s {{upper $t}}) EveryIndex(f {{upper $t}}TestIndexFunc) bool {
	for i, e := range s {
		if !f(e, i) {
			return false
		}
	}
	return true
}

func (s {{upper $t}}) Filter(f {{upper $t}}TestFunc) {{upper $t}} {
	r := []{{$t}}{}
	for _, e := range s {
		if f(e) {
			r = append(r, e)
		}
	}
	return r
}

func (s {{upper $t}}) FilterIndex(f {{upper $t}}TestIndexFunc) {{upper $t}} {
	r := []{{$t}}{}
	for i, e := range s {
		if f(e, i) {
			r = append(r, e)
		}
	}
	return r
}
{{end}}
